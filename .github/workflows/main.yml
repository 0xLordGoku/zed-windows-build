name: Test Upload and Issue Creation
on: [push, workflow_dispatch]

permissions:
  contents: read
  issues: write

jobs:
  test-upload-and-issue:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create test file
      run: |
        cat <<-EOF > test-upload.txt
        Test File for Upload
        ====================
        Created: $(date)
        Repository: ${{ github.repository }}
        Commit: ${{ github.sha }}
        Workflow Run: ${{ github.run_id }}

        This is a test file to verify the upload functionality.
        EOF
        echo "Created test file:"
        cat test-upload.txt

    - name: Upload file and Set Status
      id: upload
      run: |
        # Use a new service and capture all output (stdout and stderr) from curl.
        # This prevents the step from failing if curl has a network error.
        response=$(curl -T ./test-upload.txt bashupload.com 2>&1)
        
        # Check if the response is a valid URL, which indicates success.
        if [[ "$response" == https* ]]; then
          echo "Upload successful!"
          echo "Download Link: $response"
          echo "upload_status=success" >> $GITHUB_OUTPUT
          echo "download_link=$response" >> $GITHUB_OUTPUT
          echo "expiry=24 hours" >> $GITHUB_OUTPUT # bashupload default expiry
        else
          echo "Upload failed!"
          echo "Error response: $response"
          echo "upload_status=failed" >> $GITHUB_OUTPUT
          # Save the actual curl error message for the issue body.
          echo "error_message=$response" >> $GITHUB_OUTPUT
        fi

    - name: Create GitHub Issue with Download Link
      if: always()
      uses: actions/github-script@v7
      with:
        script: |
          const uploadStatus = '${{ steps.upload.outputs.upload_status }}';
          const downloadLink = '${{ steps.upload.outputs.download_link }}';
          const expiry = '${{ steps.upload.outputs.expiry }}';
          const errorMessage = `${{ steps.upload.outputs.error_message }}`.trim();

          const statusIcon = uploadStatus === 'success' ? '✅' : '❌';
          const issueTitle = `Upload Test ${statusIcon} ${uploadStatus || 'unknown'} - ${new Date().toLocaleDateString()}`;

          // **FIX:** Create a base label array and only add the status if it's not empty.
          const labels = ['upload-test'];
          if (uploadStatus) {
            labels.push(uploadStatus);
          }
          
          let issueBody = `## File Upload Test Results\n\n`;
          
          if (uploadStatus === 'success') {
            issueBody += `**Status:** ${statusIcon} Upload Successful\n\n`;
            issueBody += `### Download Information\n`;
            issueBody += `**Download Link:** ${downloadLink}\n`;
            issueBody += `**Expires:** Approximately ${expiry}\n`;
          } else {
            issueBody += `**Status:** ${statusIcon} Upload Failed\n\n`;
            issueBody += `**Reason:** \`\`\`\n${errorMessage || 'No error message available.'}\n\`\`\`\n\n`;
          }
          
          issueBody += `### Build Details\n`;
          issueBody += `- **Repository:** ${{ github.repository }}\n`;
          issueBody += `- **Commit:** ${{ github.sha }}\n`;
          issueBody += `- **Workflow Run:** [View Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})\n`;
          
          try {
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: issueTitle,
              body: issueBody,
              labels: labels // Use the safely constructed labels array
            });
            console.log(`Issue created successfully: ${issue.data.html_url}`);
          } catch (error) {
            console.error('Failed to create issue:', error);
            throw error;
          }
