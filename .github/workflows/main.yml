name: CI
on: [push, workflow_dispatch]

# === FIX: ADD PERMISSIONS BLOCK ===
permissions:
  issues: write
  contents: read # Good practice to keep for actions/checkout

# === BUILD CONFIGURATION ===
env:
  # Change these variables to build from different branch/tag
  BUILD_TARGET: "v0.206.0-pre"           # Can be: branch name, tag name, or commit hash
  BUILD_TYPE: "tag"           # Can be: "branch" or "tag"

jobs:
  build:
    runs-on: windows-latest
    steps:
    - name: Enable Long Path Support
      run: |
        reg.exe add "HKLM\SYSTEM\CurrentControlSet\Control\FileSystem" /v LongPathsEnabled /t REG_DWORD /d 1 /f
    
    # Setup RDP access FIRST
    - name: Download ngrok
      run: Invoke-WebRequest https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip -OutFile ngrok.zip
    - name: Extract ngrok
      run: Expand-Archive ngrok.zip
    - name: Auth ngrok
      run: .\ngrok\ngrok.exe authtoken $Env:NGROK_AUTH_TOKEN
      env:
        NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
    - name: Enable TS
      run: Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0
    - name: Allow RDP Through Firewall
      run: Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
    - name: Require NLA
      run: Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 1
    - name: Reset runneradmin Password
      run: Set-LocalUser -Name "runneradmin" -Password (ConvertTo-SecureString -AsPlainText "P@ssw0rd!" -Force)
    
    # Start ngrok tunnel and build process
    - name: Create Tunnel and Run Build
      id: build
      run: |
        # Start ngrok tunnel in background
        Start-Process -FilePath ".\ngrok\ngrok.exe" -ArgumentList "tcp", "3389" -WindowStyle Hidden
        Start-Sleep -Seconds 10
        Write-Host "RDP tunnel should be available now!"
        
        # Function to log with timestamp (available in main scope)
        function Write-Log {
          param([string]$message)
          $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
          $logMessage = "[$timestamp] $message"
          Write-Host $logMessage
        }
        
        try {
          Write-Log "=== Starting Zed Build Process ==="
          Write-Log "Working directory: $(Get-Location)"
          Write-Log "Build Target: $env:BUILD_TARGET"
          Write-Log "Build Type: $env:BUILD_TYPE"
          
          # Configure git for long paths
          Write-Log "Configuring git for long paths..."
          git config --global core.longpaths true
          Write-Log "Git longpaths configured successfully"
          
          # Install CMake
          Write-Log "Installing CMake..."
          choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System' -y
          Write-Log "CMake installation completed"
          
          # Install Rustup
          Write-Log "Installing Rustup..."
          choco install rustup.install -y
          Write-Log "Rustup installation completed"
          
          # Refresh PATH manually
          Write-Log "Refreshing PATH environment variables..."
          $env:PATH = [System.Environment]::GetEnvironmentVariable("PATH", "Machine") + ";" + [System.Environment]::GetEnvironmentVariable("PATH", "User")
          $env:PATH += ";C:\Program Files\CMake\bin"
          $env:PATH += ";$env:USERPROFILE\.cargo\bin"
          
          # Initialize Rust toolchain
          Write-Log "Initializing Rust toolchain..."
          $rustupPath = "$env:USERPROFILE\.cargo\bin\rustup.exe"
          if (Test-Path $rustupPath) {
            & $rustupPath default stable
            Write-Log "Rust toolchain initialized successfully"
          } else {
            Write-Log "ERROR: Rustup not found at expected path: $rustupPath"
            throw "Rustup installation failed"
          }
          
          # Clone Zed repository
          Write-Log "Cloning Zed repository..."
          git clone https://github.com/zed-industries/zed.git
          Write-Log "Git clone completed"
          
          if (Test-Path "zed") {
            Write-Log "Successfully cloned Zed repository"
            Set-Location "zed"
            Write-Log "Changed to zed directory: $(Get-Location)"
            
            # Checkout specific branch or tag
            Write-Log "=== Checking out $env:BUILD_TYPE: $env:BUILD_TARGET ==="
            if ($env:BUILD_TYPE -eq "tag") {
              Write-Log "Checking out tag: $env:BUILD_TARGET"
              git checkout "tags/$env:BUILD_TARGET"
            } else {
              Write-Log "Checking out branch/commit: $env:BUILD_TARGET"
              git checkout $env:BUILD_TARGET
            }
            
            # Get version information
            $currentCommit = git rev-parse HEAD
            $currentCommitShort = git rev-parse --short HEAD
            Write-Log "Current commit: $currentCommit"
            
            # Try to get version from Cargo.toml
            $version = "Unknown"
            if (Test-Path "crates\zed\Cargo.toml") {
              $cargoContent = Get-Content "crates\zed\Cargo.toml" -Raw
              if ($cargoContent -match 'version\s*=\s*"([^"]+)"') {
                $version = $matches[1]
                Write-Log "Found version in Cargo.toml: $version"
              }
            }
            
            # Try to get tag if we're on a tagged commit
            $tagInfo = git describe --tags --exact-match 2>$null
            if ($tagInfo) {
              $version = $tagInfo
              Write-Log "Using git tag as version: $version"
            }
            
            # Set build info for later use
            echo "zed_version=$version" >> $env:GITHUB_OUTPUT
            echo "commit_hash=$currentCommitShort" >> $env:GITHUB_OUTPUT
            echo "build_target=$env:BUILD_TARGET" >> $env:GITHUB_OUTPUT
            echo "build_type=$env:BUILD_TYPE" >> $env:GITHUB_OUTPUT
            
            Write-Log "=== Starting Cargo Build Process ==="
            $cargoPath = "$env:USERPROFILE\.cargo\bin\cargo.exe"
            
            # Execute cargo build
            $startTime = Get-Date
            $process = Start-Process -FilePath $cargoPath -ArgumentList "build", "--release" -NoNewWindow -PassThru
            
            # Monitor build progress
            while (-not $process.HasExited) {
              Start-Sleep -Seconds 60
              $elapsed = (Get-Date) - $startTime
              Write-Log "Build still running... Elapsed time: $($elapsed.ToString('hh\:mm\:ss'))"
            }
            
            $buildDuration = (Get-Date) - $startTime
            Write-Log "Build process completed in: $($buildDuration.ToString('hh\:mm\:ss'))"
            Write-Log "Build exit code: $($process.ExitCode)"
            
            # Find the built executable
            $exePath = "target\release\zed.exe"
            
            if (Test-Path $exePath) {
              $fileSize = (Get-Item $exePath).Length
              $fileSizeMb = [math]::Round($fileSize/1MB, 2)
              Write-Log "=== BUILD SUCCESSFUL ==="
              Write-Log "Zed executable found: $exePath"
              Write-Log "File size: $fileSizeMb MB"
              Write-Log "Version: $version"
              Write-Log "Commit: $currentCommitShort"
              
              # Upload to Bashupload
              Write-Log "=== Uploading executable to Bashupload... ==="
              $bashUploadLink = "Upload failed. See logs for details."
              try {
                $uploadResponse = & curl.exe -s -T $exePath "bashupload.com"
                $download_link = $uploadResponse | Select-String -Pattern "http" | ForEach-Object { ($_ -split '\s+')[1] } | Select-Object -First 1
                if ($download_link -and $download_link.StartsWith("http")) {
                  Write-Log "=== BASHUPLOAD SUCCESSFUL ==="
                  Write-Log "Download link: $download_link"
                  $bashUploadLink = $download_link
                } else {
                  Write-Log "=== BASHUPLOAD FAILED ==="
                  Write-Log "Could not parse download link from response."
                }
              } catch {
                Write-Log "=== BASHUPLOAD ERROR ==="
                Write-Log "Exception: $($_.Exception.Message)"
              }
              echo "download_link=$bashUploadLink" >> $env:GITHUB_OUTPUT
              echo "file_size=$fileSizeMb MB" >> $env:GITHUB_OUTPUT
              echo "build_duration=$($buildDuration.ToString('hh\:mm\:ss'))" >> $env:GITHUB_OUTPUT
              
              # Upload to Filebin
              Write-Log "=== Uploading executable to Filebin... ==="
              $filebinLinkOutput = "Upload failed. See logs for details."
              try {
                $filebinBin = [Guid]::NewGuid().ToString("n")
                $filebinFileName = "zed-$currentCommitShort.exe"
                $filebinUrl = "https://filebin.net/$filebinBin/$filebinFileName"
                $statusCode = & curl.exe -s -o nul -w "%{http_code}" -T $exePath $filebinUrl
                Write-Log "Filebin response status code: $statusCode"
                if ($LASTEXITCODE -eq 0 -and ($statusCode -eq "201" -or $statusCode -eq "200")) {
                  Write-Log "=== FILEBIN UPLOAD SUCCESSFUL ==="
                  Write-Log "Filebin link: $filebinUrl"
                  $filebinLinkOutput = $filebinUrl
                  echo "filebin_bin=$filebinBin" >> $env:GITHUB_OUTPUT
                } else {
                  Write-Log "=== FILEBIN UPLOAD FAILED ==="
                }
              } catch {
                Write-Log "=== FILEBIN UPLOAD ERROR ==="
                Write-Log "Exception: $($_.Exception.Message)"
              }
              echo "filebin_link=$filebinLinkOutput" >> $env:GITHUB_OUTPUT
              
            } else {
              Write-Log "=== BUILD FAILED ==="
              Write-Log "ERROR: Could not find Zed executable after build"
            }
          } else {
            Write-Log "ERROR: Failed to clone Zed repository"
          }
        } catch {
          Write-Log "ERROR: Exception occurred: $($_.Exception.Message)"
        }
        
        Write-Log "=== Build Process Script Completed ==="
      env:
        BUILD_TARGET: ${{ env.BUILD_TARGET }}
        BUILD_TYPE: ${{ env.BUILD_TYPE }}
    
    # Create GitHub Issue with download link
    - name: Create Issue with Download Link
      if: always()
      uses: actions/github-script@v7
      with:
        script: |
          const buildStatus = '${{ job.status }}';
          const bashuploadLink = '${{ steps.build.outputs.download_link }}' || 'Build failed - no Bashupload link';
          const filebinLink = '${{ steps.build.outputs.filebin_link }}' || 'Build failed - no Filebin link';
          const fileSize = '${{ steps.build.outputs.file_size }}' || 'Unknown';
          const buildDuration = '${{ steps.build.outputs.build_duration }}' || 'Unknown';
          const zedVersion = '${{ steps.build.outputs.zed_version }}' || 'Unknown';
          const commitHash = '${{ steps.build.outputs.commit_hash }}' || 'Unknown';
          const buildTarget = '${{ steps.build.outputs.build_target }}' || '${{ env.BUILD_TARGET }}';
          const buildType = '${{ steps.build.outputs.build_type }}' || '${{ env.BUILD_TYPE }}';
          const filebinBin = '${{ steps.build.outputs.filebin_bin }}' || 'N/A';
          
          const issueBody = `
          ## Zed Editor Build Completed
          
          **Status:** ${buildStatus}
          **Version:** ${zedVersion}
          **Build Target:** ${buildTarget} (${buildType})
          **Commit Hash:** ${commitHash}
          **Build Duration:** ${buildDuration}
          **File Size:** ${fileSize}
          
          ### Download Links
          - Bashupload: ${bashuploadLink}
          - Filebin: ${filebinLink}
          
          ### Filebin Details
          - Bin ID: ${filebinBin}
          - Direct Download: ${filebinLink}
          
          ### Important Notes
          - These links are temporary and may expire.
          - Built from ${buildType}: \`${buildTarget}\`
          - Zed version: \`${zedVersion}\`
          
          ### Build Details
          - Repository: ${{ github.repository }}
          - Commit: ${{ github.sha }}
          - Branch: ${{ github.ref }}
          - Workflow Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          `;
          
          const titleSuffix = zedVersion !== 'Unknown' ? ` (${zedVersion})` : '';
          
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Zed Build ${buildStatus} - ${buildTarget}${titleSuffix} - ${new Date().toLocaleDateString()}`,
            body: issueBody,
            labels: ['build-notification', buildStatus.toLowerCase()]
          });

    # Stop RDP tunnel after all previous steps
    - name: Stop RDP Tunnel
      if: always()
      run: |
        Write-Host "Closing RDP tunnel..."
        Stop-Process -Name "ngrok" -Force -ErrorAction SilentlyContinue
        Write-Host "RDP tunnel closed."
