name: Test Upload and Issue Creation
on: [push, workflow_dispatch]

permissions:
  contents: read
  issues: write

jobs:
  test-upload-and-issue:
    runs-on: ubuntu-latest # Switched to ubuntu for easier curl/bash scripting
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create test file
      run: |
        # Create a simple test file to upload
        test_content=$(cat <<-END
        Test File for Upload
        ====================
        Created: $(date)
        Repository: ${{ github.repository }}
        Commit: ${{ github.sha }}
        Workflow Run: ${{ github.run_id }}

        This is a test file to verify the upload functionality.
        END
        )
        echo "$test_content" > test-upload.txt
        echo "Created test file: test-upload.txt"
        cat test-upload.txt

    - name: Upload file to transfer.sh
      id: upload
      run: |
        # Upload the file using curl and capture the output (the download link)
        # transfer.sh keeps files for 14 days
        download_link=$(curl --upload-file ./test-upload.txt https://transfer.sh/test-upload.txt)
        
        if [[ "$download_link" == https* ]]; then
          echo "Upload successful!"
          echo "Download Link: $download_link"
          echo "upload_status=success" >> $GITHUB_OUTPUT
          echo "download_link=$download_link" >> $GITHUB_OUTPUT
          echo "expiry=14 days" >> $GITHUB_OUTPUT
        else
          echo "Upload failed!"
          echo "Response: $download_link"
          echo "upload_status=failed" >> $GITHUB_OUTPUT
          echo "error_message=Failed to upload to transfer.sh. Response: $download_link" >> $GITHUB_OUTPUT
        fi

    - name: Create GitHub Issue with Download Link
      if: always() # This step runs even if the upload fails to report the status
      uses: actions/github-script@v7
      with:
        script: |
          const uploadStatus = '${{ steps.upload.outputs.upload_status }}';
          const downloadLink = '${{ steps.upload.outputs.download_link }}';
          const expiry = '${{ steps.upload.outputs.expiry }}';
          const errorMessage = '${{ steps.upload.outputs.error_message }}';

          const statusIcon = uploadStatus === 'success' ? '✅' : '❌';
          const issueTitle = `Upload Test ${statusIcon} ${uploadStatus.charAt(0).toUpperCase() + uploadStatus.slice(1)} - ${new Date().toLocaleDateString()}`;
          
          let issueBody = `## File Upload Test Results\n\n`;
          
          if (uploadStatus === 'success') {
            issueBody += `**Status:** ${statusIcon} Upload Successful\n\n`;
            issueBody += `### Download Information\n`;
            issueBody += `**Download Link:** ${downloadLink}\n`;
            issueBody += `**Expires:** ${expiry}\n\n`;
            issueBody += `### Important Notes\n`;
            issueBody += `- This link is hosted on transfer.sh.\n`;
            issueBody += `- File will be available for 14 days.\n`;
          } else {
            issueBody += `**Status:** ${statusIcon} Upload Failed\n\n`;
            issueBody += `**Reason:** \`\`\`\n${errorMessage || 'No error message provided.'}\n\`\`\`\n\n`;
          }
          
          issueBody += `### Build Details\n`;
          issueBody += `- **Repository:** ${{ github.repository }}\n`;
          issueBody += `- **Commit:** ${{ github.sha }}\n`;
          issueBody += `- **Branch:** ${{ github.ref }}\n`;
          issueBody += `- **Workflow Run:** [View Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})\n`;
          issueBody += `- **Triggered by:** ${{ github.event_name }}\n`;
          issueBody += `- **Actor:** @${{ github.actor }}\n`;
          
          try {
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: issueTitle,
              body: issueBody,
              labels: ['upload-test', uploadStatus]
            });
            
            console.log(`Issue created successfully: ${issue.data.html_url}`);
          } catch (error) {
            console.error('Failed to create issue:', error);
            throw error;
          }
