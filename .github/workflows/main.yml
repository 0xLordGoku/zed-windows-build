name: CI
on: [push, workflow_dispatch]

# === PERMISSIONS ===
permissions:
  contents: write  # Required for creating releases

# === BUILD CONFIGURATION ===
env:
  # Change these variables to build from different branch/tag
  BUILD_TARGET: "tag"           # Can be: branch name, tag name, or commit hash
  BUILD_TYPE: "v0.208.4-pre"           # Can be: "branch" or "tag"

jobs:
  build:
    runs-on: windows-latest
    steps:
    - name: Enable Long Path Support
      run: |
        reg.exe add "HKLM\SYSTEM\CurrentControlSet\Control\FileSystem" /v LongPathsEnabled /t REG_DWORD /d 1 /f
    
    # Build process
    - name: Build Zed
      id: build
      run: |
        # Function to log with timestamp (available in main scope)
        function Write-Log {
          param([string]$message)
          $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
          $logMessage = "[$timestamp] $message"
          Write-Host $logMessage
        }
        
        try {
          Write-Log "=== Starting Zed Build Process ==="
          Write-Log "Working directory: $(Get-Location)"
          Write-Log "Build Target: $env:BUILD_TARGET"
          Write-Log "Build Type: $env:BUILD_TYPE"
          
          # Configure git for long paths
          Write-Log "Configuring git for long paths..."
          git config --global core.longpaths true
          Write-Log "Git longpaths configured successfully"
          
          # Install CMake
          Write-Log "Installing CMake..."
          choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System' -y
          Write-Log "CMake installation completed"
          
          # Install Rustup
          Write-Log "Installing Rustup..."
          choco install rustup.install -y
          Write-Log "Rustup installation completed"
          
          # Refresh PATH manually
          Write-Log "Refreshing PATH environment variables..."
          $env:PATH = [System.Environment]::GetEnvironmentVariable("PATH", "Machine") + ";" + [System.Environment]::GetEnvironmentVariable("PATH", "User")
          $env:PATH += ";C:\Program Files\CMake\bin"
          $env:PATH += ";$env:USERPROFILE\.cargo\bin"
          
          # Initialize Rust toolchain
          Write-Log "Initializing Rust toolchain..."
          $rustupPath = "$env:USERPROFILE\.cargo\bin\rustup.exe"
          if (Test-Path $rustupPath) {
            & $rustupPath default stable
            Write-Log "Rust toolchain initialized successfully"
          } else {
            Write-Log "ERROR: Rustup not found at expected path: $rustupPath"
            throw "Rustup installation failed"
          }
          
          # Clone Zed repository
          Write-Log "Cloning Zed repository..."
          git clone https://github.com/zed-industries/zed.git
          Write-Log "Git clone completed"
          
          if (Test-Path "zed") {
            Write-Log "Successfully cloned Zed repository"
            Set-Location "zed"
            Write-Log "Changed to zed directory: $(Get-Location)"
            
            # Checkout specific branch or tag
            Write-Log "=== Checking out $env:BUILD_TYPE: $env:BUILD_TARGET ==="
            if ($env:BUILD_TYPE -eq "tag") {
              Write-Log "Checking out tag: $env:BUILD_TARGET"
              git checkout "tags/$env:BUILD_TARGET"
            } else {
              Write-Log "Checking out branch/commit: $env:BUILD_TARGET"
              git checkout $env:BUILD_TARGET
            }
            
            # Get version information
            $currentCommit = git rev-parse HEAD
            $currentCommitShort = git rev-parse --short HEAD
            Write-Log "Current commit: $currentCommit"
            
            # Try to get version from Cargo.toml
            $version = "Unknown"
            if (Test-Path "crates\zed\Cargo.toml") {
              $cargoContent = Get-Content "crates\zed\Cargo.toml" -Raw
              if ($cargoContent -match 'version\s*=\s*"([^"]+)"') {
                $version = $matches[1]
                Write-Log "Found version in Cargo.toml: $version"
              }
            }
            
            # Try to get tag if we're on a tagged commit
            $tagInfo = git describe --tags --exact-match 2>$null
            if ($tagInfo) {
              $version = $tagInfo
              Write-Log "Using git tag as version: $version"
            }
            
            # Set build info for later use
            echo "zed_version=$version" >> $env:GITHUB_OUTPUT
            echo "commit_hash=$currentCommitShort" >> $env:GITHUB_OUTPUT
            echo "build_target=$env:BUILD_TARGET" >> $env:GITHUB_OUTPUT
            echo "build_type=$env:BUILD_TYPE" >> $env:GITHUB_OUTPUT
            
            Write-Log "=== Starting Cargo Build Process ==="
            $cargoPath = "$env:USERPROFILE\.cargo\bin\cargo.exe"
            
            # Execute cargo build
            $startTime = Get-Date
            $process = Start-Process -FilePath $cargoPath -ArgumentList "build", "--release" -NoNewWindow -PassThru
            
            # Monitor build progress
            while (-not $process.HasExited) {
              Start-Sleep -Seconds 60
              $elapsed = (Get-Date) - $startTime
              Write-Log "Build still running... Elapsed time: $($elapsed.ToString('hh\:mm\:ss'))"
            }
            
            $buildDuration = (Get-Date) - $startTime
            Write-Log "Build process completed in: $($buildDuration.ToString('hh\:mm\:ss'))"
            Write-Log "Build exit code: $($process.ExitCode)"
            
            # Find the built executable
            $exePath = "target\release\zed.exe"
            
            if (Test-Path $exePath) {
              $fileSize = (Get-Item $exePath).Length
              $fileSizeMb = [math]::Round($fileSize/1MB, 2)
              Write-Log "=== BUILD SUCCESSFUL ==="
              Write-Log "Zed executable found: $exePath"
              Write-Log "File size: $fileSizeMb MB"
              Write-Log "Version: $version"
              Write-Log "Commit: $currentCommitShort"
              
              # Copy to workspace root for easier access
              Copy-Item $exePath -Destination "$env:GITHUB_WORKSPACE\zed.exe"
              Write-Log "Copied zed.exe to workspace root"
              
              echo "build_success=true" >> $env:GITHUB_OUTPUT
              echo "file_size=$fileSizeMb MB" >> $env:GITHUB_OUTPUT
              echo "build_duration=$($buildDuration.ToString('hh\:mm\:ss'))" >> $env:GITHUB_OUTPUT
              
            } else {
              Write-Log "=== BUILD FAILED ==="
              Write-Log "ERROR: Could not find Zed executable after build"
              echo "build_success=false" >> $env:GITHUB_OUTPUT
            }
          } else {
            Write-Log "ERROR: Failed to clone Zed repository"
            echo "build_success=false" >> $env:GITHUB_OUTPUT
          }
        } catch {
          Write-Log "ERROR: Exception occurred: $($_.Exception.Message)"
          echo "build_success=false" >> $env:GITHUB_OUTPUT
        }
        
        Write-Log "=== Build Process Script Completed ==="
      env:
        BUILD_TARGET: ${{ env.BUILD_TARGET }}
        BUILD_TYPE: ${{ env.BUILD_TYPE }}
    
    # Create GitHub Release with zed.exe
    - name: Create GitHub Release with Zed.exe
      if: steps.build.outputs.build_success == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          try {
            const zedVersion = '${{ steps.build.outputs.zed_version }}';
            const commitHash = '${{ steps.build.outputs.commit_hash }}';
            const buildTarget = '${{ steps.build.outputs.build_target }}';
            const buildDuration = '${{ steps.build.outputs.build_duration }}';
            const fileSize = '${{ steps.build.outputs.file_size }}';
            
            // Generate release tag name
            const timestamp = new Date().toISOString().replace(/[:.]/g, '-').slice(0, -5);
            const tagName = `zed-${buildTarget}-${commitHash}-${timestamp}`;
            const releaseName = `Zed Editor ${zedVersion} - ${buildTarget}`;
            
            console.log(`Creating release with tag: ${tagName}`);
            
            // Step 1: Create the release
            const releaseBody = [
              '## üî® Zed Editor Build',
              '',
              '**üè∑Ô∏è Version:** `' + zedVersion + '`',
              '**üéØ Target:** `' + buildTarget + '`',
              '**üìù Commit:** `' + commitHash + '`',
              '**‚è±Ô∏è Build Duration:** `' + buildDuration + '`',
              '**üì¶ File Size:** `' + fileSize + '`',
              '',
              '### üì• Download',
              'Download the `zed.exe` asset below.',
              '',
              '---',
              '*Built automatically via GitHub Actions*'
            ].join('\n');
            
            const createReleaseResponse = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: tagName,
              name: releaseName,
              body: releaseBody,
              draft: false,
              prerelease: false
            });
            
            console.log(`Release created successfully. ID: ${createReleaseResponse.data.id}`);
            console.log(`Release URL: ${createReleaseResponse.data.html_url}`);
            
            const releaseId = createReleaseResponse.data.id;
            
            // Step 2: Read zed.exe
            const filePath = path.join(process.env.GITHUB_WORKSPACE, 'zed.exe');
            console.log(`Reading file from: ${filePath}`);
            
            if (!fs.existsSync(filePath)) {
              throw new Error(`zed.exe not found at ${filePath}`);
            }
            
            const fileContent = fs.readFileSync(filePath);
            const fileName = `zed-${zedVersion}-${commitHash}.exe`;
            
            console.log(`Uploading asset: ${fileName} (${fileContent.length} bytes)`);
            
            // Step 3: Upload the asset
            const uploadResponse = await github.rest.repos.uploadReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: releaseId,
              name: fileName,
              data: fileContent
            });
            
            console.log(`Asset uploaded successfully!`);
            console.log(`Download URL: ${uploadResponse.data.browser_download_url}`);
            
            // Output summary
            core.summary
              .addHeading('‚úÖ Zed Build Released Successfully')
              .addRaw(`**Version:** ${zedVersion}`)
              .addBreak()
              .addRaw(`**Commit:** ${commitHash}`)
              .addBreak()
              .addRaw(`**Size:** ${fileSize}`)
              .addBreak()
              .addRaw(`**Duration:** ${buildDuration}`)
              .addBreak()
              .addBreak()
              .addLink('üì¶ View Release', createReleaseResponse.data.html_url)
              .addBreak()
              .addLink('‚¨áÔ∏è Download Zed.exe', uploadResponse.data.browser_download_url)
              .write();
            
          } catch (error) {
            console.error('Failed to create release:', error);
            core.setFailed(`Release creation failed: ${error.message}`);
          }
